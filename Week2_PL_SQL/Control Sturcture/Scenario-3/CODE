-- Drop and recreate loans table
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE loans';
EXCEPTION
  WHEN OTHERS THEN NULL;
END;
/

CREATE TABLE loans (
    loan_id      NUMBER PRIMARY KEY,
    customer_id  NUMBER,
    due_date     DATE,
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);

-- Insert sample loans (today is assumed as 2025-06-22)
BEGIN
  INSERT INTO loans VALUES (101, 1, SYSDATE + 10);  -- Due in 10 days
  INSERT INTO loans VALUES (102, 2, SYSDATE + 35);  -- Due in 35 days (not shown)
  INSERT INTO loans VALUES (103, 3, SYSDATE + 5);   -- Due in 5 days
  INSERT INTO loans VALUES (104, 4, SYSDATE + 28);  -- Due in 28 days
  INSERT INTO loans VALUES (105, 5, SYSDATE + 50);  -- Due in 50 days (not shown)
  COMMIT;
END;
/

-- Scenario 3: Fetch loans due in the next 30 days and print reminder messages
BEGIN
  DBMS_OUTPUT.PUT_LINE('--- Loan Payment Reminders for Next 30 Days ---');

  FOR rec IN (
    SELECT l.loan_id, l.due_date, c.customer_name
    FROM loans l
    JOIN customers c ON l.customer_id = c.customer_id
    WHERE l.due_date BETWEEN SYSDATE AND SYSDATE + 30
  ) LOOP
    DBMS_OUTPUT.PUT_LINE('Reminder: ' || rec.customer_name || 
                         ', your loan #' || rec.loan_id || 
                         ' is due on ' || TO_CHAR(rec.due_date, 'DD-Mon-YYYY'));
  END LOOP;
END;
/
